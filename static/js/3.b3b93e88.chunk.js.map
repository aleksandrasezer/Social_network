{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/profile/Profile.module.css","components/profile/ProfileInfo/ProfileInfo.module.css","components/profile/MyPosts/MyPosts.module.css","components/profile/MyPosts/Post/Post.module.css","components/common/likes/Likes.module.css","components/profile/MyPosts/newPost/NewPostForm.module.css","components/profile/ProfileInfo/ProfileStatus.tsx","components/profile/ProfileInfo/ProfileInfo.tsx","components/common/likes/Likes.tsx","components/profile/MyPosts/Post/Post.tsx","components/profile/MyPosts/newPost/NewPostForm.tsx","components/profile/MyPosts/MyPosts.tsx","components/profile/Profile.tsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","ProfileStatus","props","useState","editMode","setEditMode","userStatus","status","setStatus","useEffect","isOwner","onBlur","setMyStatus","onChange","e","currentTarget","autoFocus","title","onClick","style","cursor","ProfileInfo","profile","className","s","profileInfoContainer","profilePicBox","src","photos","large","avatar","alt","type","target","files","uploadProfilePic","profileInfo","profileName","fullName","profileStatus","Preload","Likes","red","setRed","heartClassName","heart","likesContainer","likesCount","onLike","Post","userAvatar","post","postBody","postAvatar","postText","likeArea","addLike","id","Button","deletePost","disabled","maxLength60tn","maxLengthCreator","reduxForm","form","newPostForm","onSubmit","handleSubmit","Field","placeholder","name","component","Textarea","validate","required","postButton","MyPosts","useSelector","state","profilePage","posts","dispatch","useDispatch","myPostsItems","map","el","deletePostAC","addLikeAC","myPosts","formData","addPostAC","newPost","withRouter","authorizedUserId","auth","userId","isAuth","match","params","history","setUserProfileInfo","setUserStatus","refreshProfile","newStatus","photo","to"],"mappings":"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","file":"static/js/3.b3b93e88.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__1pk1s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfoContainer\":\"ProfileInfo_profileInfoContainer__31izu\",\"profilePicBox\":\"ProfileInfo_profilePicBox__1v2ul\",\"profileInfo\":\"ProfileInfo_profileInfo__3MZRw\",\"profileName\":\"ProfileInfo_profileName__21N8p\",\"profileStatus\":\"ProfileInfo_profileStatus__2pzyQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__5LJIW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__1TuW0\",\"postBody\":\"Post_postBody__37jfN\",\"postText\":\"Post_postText__1kRe1\",\"likeArea\":\"Post_likeArea__6q2go\",\"likes\":\"Post_likes__mY4Dr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"likesContainer\":\"Likes_likesContainer__2K8F7\",\"likesCount\":\"Likes_likesCount__2zRNx\",\"heart\":\"Likes_heart__1Dgfr\",\"red\":\"Likes_red__2pvC4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPostForm\":\"NewPostForm_newPostForm__1M3y9\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\nexport const ProfileStatus = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.userStatus)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.setMyStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setStatus(props.userStatus)\r\n    }, [props.userStatus])\r\n\r\n    return (\r\n        <div>\r\n            {props.isOwner\r\n                ? (!editMode\r\n                        ? <div>\r\n                            <span title='Click to edit' onClick={onEditMode}\r\n                                  style={{cursor: 'pointer'}}>{props.userStatus || '---'}</span>\r\n                        </div>\r\n                        : <div>\r\n                            <div>\r\n                                <input onBlur={offEditMode}\r\n                                       onChange={onStatusChange}\r\n                                       autoFocus={true}\r\n                                       value={status}/>\r\n                            </div>\r\n                        </div>\r\n                )\r\n                : <span>{props.userStatus || '---'}</span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n//types\r\ntype ProfileStatusPropsType = {\r\n    userStatus: string\r\n    setMyStatus: (newStatus: string) => void\r\n    isOwner: boolean\r\n}","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport {Preload} from \"../../common/preload/Preload\";\r\nimport avatar from '../../../assets/images/bryan_avatar.jpg'\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\r\n\r\n    const onChangePhotoHandler = (e: any) => {\r\n        e.target.files.length && props.uploadProfilePic(e.target.files[0])\r\n    }\r\n\r\n    return <>\r\n        {!props.profile\r\n            ? <Preload/>\r\n            : <div className={s.profileInfoContainer}>\r\n                <div className={s.profilePicBox}>\r\n                    <img src={props.profile.photos.large || avatar} alt='profile_avatar'/>\r\n                    {props.isOwner && <input type='file' onChange={onChangePhotoHandler}/>}\r\n                </div>\r\n                <div className={s.profileInfo}>\r\n                    <div className={s.profileName}>\r\n                        {props.profile.fullName}\r\n                    </div>\r\n                    <div className={s.profileStatus}>\r\n                    <ProfileStatus userStatus={props.userStatus}\r\n                                   setMyStatus={props.setMyStatus}\r\n                                   isOwner={props.isOwner}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        }\r\n    </>\r\n}\r\n\r\n//types\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    userStatus: string\r\n    setMyStatus: (newStatus: string) => void\r\n    uploadProfilePic: (photo: File) => void\r\n    isOwner: boolean\r\n}","import React, {useState} from \"react\";\r\nimport s from './Likes.module.css'\r\n\r\nexport const Likes = (props: LikesPropsType) => {\r\n\r\n    const [red, setRed] = useState<boolean>(false)\r\n    const heartClassName = !red ? `${s.heart}` : `${s.red}`\r\n\r\n    const onHeartClickHandler = () => {\r\n        props.onLike()\r\n        setRed(true)\r\n    }\r\n\r\n    return (\r\n        <div className={s.likesContainer}>\r\n            <div className={s.likesCount}>\r\n                {props.likesCount}\r\n            </div>\r\n            <div title='Like' className={heartClassName} onClick={onHeartClickHandler}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//types\r\ntype LikesPropsType = {\r\n    likesCount: number\r\n    onLike: () => void\r\n}","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\nimport {Button} from \"../../../Button/Button\";\r\nimport {PostType, ProfileType} from \"../../../../types/types\";\r\nimport {Likes} from \"../../../common/likes/Likes\";\r\nimport avatar from '../../../../assets/images/bryan_avatar.jpg'\r\n\r\nexport const Post = (props: PostPropsType) => {\r\n\r\n    const userAvatar = props.profile?.photos.large ?? avatar\r\n\r\n    return (\r\n        <div className={s.post}>\r\n            <div className={s.postBody}>\r\n                <div className={s.postAvatar}>\r\n                    <img src={userAvatar} alt='profile_avatar'/>\r\n                </div>\r\n                <div className={s.postText}>\r\n                    {props.postText}\r\n                </div>\r\n            </div>\r\n            <div className={s.likeArea}>\r\n                <Likes likesCount={props.likesCount}\r\n                       onLike={() => props.addLike(props.id)}/>\r\n                <Button onClick={() => props.deletePost(props.id)}\r\n                        disabled={false}> Delete </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n//types\r\ntype PostPropsType = PostType & {\r\n    deletePost: (id: string) => void\r\n    addLike: (id: string) => void\r\n    profile: ProfileType | null\r\n}","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../../common/formControls/FormControls\";\r\nimport {maxLengthCreator, required} from \"../../../../validators/validators\";\r\nimport {Button} from \"../../../Button/Button\";\r\nimport s from './NewPostForm.module.css'\r\n\r\nconst maxLength60tn = maxLengthCreator(60000)\r\n\r\nconst NewPostForm: React.FC<InjectedFormProps<PostFormDataType>> = (props) => {\r\n    return (\r\n        <div className={s.newPostForm}>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field placeholder={'let people know how you feel'}\r\n                           name={'newPost'}\r\n                           component={Textarea}\r\n                           validate={[required, maxLength60tn]}/>\r\n                </div>\r\n                <span className={s.postButton}>\r\n                    <Button>Post</Button>\r\n                </span>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default reduxForm<PostFormDataType>({form: 'newPost'})(NewPostForm)\r\n\r\n//types\r\nexport type PostFormDataType = {\r\n    newPost: string\r\n}","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\"\r\nimport {Post} from \"./Post/Post\";\r\nimport NewPostForm, {PostFormDataType} from \"./newPost/NewPostForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../redux/redux-store\";\r\nimport {addLikeAC, addPostAC, deletePostAC} from \"../../../redux/profile-reducer\";\r\n\r\nexport const MyPosts = () => {\r\n\r\n    const {posts, profile} = useSelector((state: RootState) => state.profilePage)\r\n    const dispatch = useDispatch()\r\n\r\n    const myPostsItems = posts.map((el) => <Post key={el.id}\r\n                                               id={el.id}\r\n                                               postText={el.postText}\r\n                                               likesCount={el.likesCount}\r\n                                               deletePost={(id: string) => dispatch(deletePostAC(id))}\r\n                                               addLike={(id: string) => dispatch(addLikeAC(id))}\r\n                                               profile={profile}/>)\r\n    const onAddPost = (formData: PostFormDataType) => {\r\n        dispatch(addPostAC(formData.newPost))\r\n    }\r\n\r\n    return (\r\n        <div className={s.myPosts}>\r\n            <NewPostForm onSubmit={onAddPost}/>\r\n            <div>\r\n                {myPostsItems}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from \"react\";\r\nimport s from \"./Profile.module.css\"\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../redux/redux-store\";\r\nimport {setMyStatus, setUserProfileInfo, setUserStatus, uploadProfilePic} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router\";\r\nimport {MyPosts} from \"./MyPosts/MyPosts\";\r\n\r\nfunction Profile(props: ProfilePropsType) {\r\n\r\n    const {profile, userStatus} = useSelector((state:RootState) => state.profilePage)\r\n    const authorizedUserId = useSelector((state:RootState) => state.auth.userId)\r\n    const isAuth = useSelector((state:RootState) => state.auth.isAuth)\r\n    const dispatch = useDispatch()\r\n\r\n    const refreshProfile = () => {\r\n        let userId = props.match.params.userId\r\n        if (!userId) {\r\n            // @ts-ignore\r\n            userId = authorizedUserId\r\n            if (!userId) {\r\n                props.history.push('/login')\r\n            }\r\n        }\r\n        dispatch(setUserProfileInfo(userId))\r\n        dispatch(setUserStatus(userId))\r\n    }\r\n\r\n    useEffect(() => refreshProfile(), [authorizedUserId, dispatch, props.match.params.userId])\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to='/login'/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.profile}>\r\n                <ProfileInfo profile={profile}\r\n                             isOwner={!props.match.params.userId}\r\n                             userStatus={userStatus}\r\n                             setMyStatus={(newStatus: string) => dispatch(setMyStatus(newStatus))}\r\n                             uploadProfilePic={(photo:File) => dispatch(uploadProfilePic(photo))}/>\r\n            </div>\r\n            <div>\r\n                <MyPosts />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(Profile);\r\n\r\n//types\r\ntype ProfilePropsType = RouteComponentProps<{userId: string}>"],"sourceRoot":""}