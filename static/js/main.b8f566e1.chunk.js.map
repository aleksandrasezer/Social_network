{"version":3,"sources":["components/navbar/Navbar.module.css","components/users/Users.module.css","components/profile/MyPosts/Post/Post.module.css","components/dialogs/Dialogs.module.css","components/dialogs/Dialog/Dialog.module.css","components/header/Header.module.css","components/profile/Profile.module.css","components/profile/ProfileInfo/ProfileInfo.module.css","components/profile/MyPosts/MyPosts.module.css","components/Button/Button.module.css","components/ControlledTextarea/ControlledTextarea.module.css","components/dialogs/messages/Messages.module.css","components/dialogs/messages/Message.module.css","components/header/Header.tsx","components/navbar/Navbar.tsx","components/profile/ProfileInfo/ProfileInfo.tsx","redux/profile-reducer.tsx","components/Button/Button.tsx","components/profile/MyPosts/Post/Post.tsx","components/ControlledTextarea/ControlledTextarea.tsx","components/profile/MyPosts/MyPosts.tsx","components/profile/MyPosts/MyPostsContainer.tsx","components/profile/Profile.tsx","components/dialogs/messages/Message.tsx","components/dialogs/messages/Messages.tsx","components/dialogs/Dialog/Dialog.tsx","components/dialogs/Dialogs.tsx","redux/dialogs-reducer.tsx","components/dialogs/DialogsContainer.tsx","redux/users-reduscer.tsx","components/users/UsersContainer.tsx","components/users/Users.tsx","App.tsx","reportWebVitals.ts","redux/redux-store.tsx","index.tsx"],"names":["module","exports","Header","className","s","header","src","alt","Navbar","navbar","item","activeClassName","activeLink","to","href","ProfileInfo","props","img","profileInfo","name","age","aboutMe","initialState","posts","id","v1","postText","likesCount","newPostText","updateNewPostTextAC","text","type","newText","Button","buttonStyle","onClick","children","Post","post","postBody","postAvatar","likeArea","removePost","ControlledTextarea","input","onChange","e","currentTarget","test","value","onPostChange","onTextClick","autoFocus","MyPosts","myPostsItems","map","el","myPosts","onTextClickHandler","addPost","MyPostsContainer","connect","state","profilePage","dispatch","removePostAC","Profile","profile","Message","message","Messages","messagesItems","messages","messageText","console","log","onMessageChangeHandler","newMessageText","addNewMessage","Dialog","dialog","activeDialog","Dialogs","dialogsItems","dialogs","initialStore","newMessageBody","updateNewMessageBodyAC","DialogsContainer","dialogsPage","users","UsersContainer","usersPage","follow","FollowAC","unfollow","UnfollowAC","setUsers","SetUsersAC","length","profileURL","followed","surName","city","country","userBody","avatarAndFollow","profilePic","infoContainer","nameSurname","cityCountry","App","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","filter","p","store","createStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8f566e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__2u2Yx\",\"item\":\"Navbar_item__1nEI7\",\"activeLink\":\"Navbar_activeLink__3ePDo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profilePic\":\"Users_profilePic__2lzTQ\",\"infoContainer\":\"Users_infoContainer__1-gRo\",\"userBody\":\"Users_userBody__3kVNt\",\"avatarAndFollow\":\"Users_avatarAndFollow__eN5Oo\",\"nameSurname\":\"Users_nameSurname__7pvEk\",\"cityCountry\":\"Users_cityCountry__3ciy8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__ev8Uz\",\"postBody\":\"Post_postBody__1zq20\",\"postText\":\"Post_postText__3WMa9\",\"likeArea\":\"Post_likeArea__2LeB2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2B8uW\",\"dialogsItems\":\"Dialogs_dialogsItems__1_8kw\",\"messages\":\"Dialogs_messages__3eMQ4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__VVj-X\",\"activeDialog\":\"Dialog_activeDialog__35LJb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__jfPv8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__33M3z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__1Bljo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__2wOLj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonStyle\":\"Button_buttonStyle__39ehE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ControlledTextarea_input__UzrWz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Messages_messages__3K0tN\",\"message\":\"Messages_message__3xkcK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1W3KS\"};","import React from \"react\";\r\nimport s from \"./Header.module.css\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className={s.header}>\r\n            <img src=\"https://www.clipartkey.com/mpngs/m/67-676200_clip-art-pinterest-rick-and-morty-png.png\" alt=\"logo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport s from \"./Navbar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nfunction Navbar() {\r\n    return <div className={s.navbar}>\r\n        <div className={s.item}>\r\n            <NavLink activeClassName={s.activeLink} to=\"/profile\">Profile</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink activeClassName={s.activeLink} to=\"/dialogs\">Messages</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink activeClassName={s.activeLink} to='/users'>Users</NavLink>\r\n        </div>\r\n        <div className={s.item}><a href=\"/feed\">News</a></div>\r\n        <div className={s.item}><a href=\"/music\">Music</a></div>\r\n        <div className={s.item}><a href=\"/settings\">Settings</a></div>\r\n    </div>\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\n\r\ntype ProfileInfoPropsType = {\r\n    img: string\r\n    name: string\r\n    age: number\r\n    aboutMe: string\r\n}\r\n\r\nfunction ProfileInfo(props: ProfileInfoPropsType) {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src={props.img} alt='my_profile_avatar'/>\r\n            </div>\r\n            <div className={s.profileInfo}>\r\n                {props.name} <br/>\r\n                {props.age} y.o.<br/>\r\n                {props.aboutMe}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfileInfo;","import {v1} from \"uuid\";\r\nimport {PostType} from \"./store\";\r\n\r\ntype ProfilePageType = { posts: PostType[], newPostText: string }\r\n\r\ntype ActionTypes = ReturnType<typeof addPostAC> |\r\n    ReturnType<typeof updateNewPostTextAC> |\r\n    ReturnType<typeof removePostAC>\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: v1(), postText: \"Hello there\", likesCount: 8},\r\n        {id: v1(), postText: \"It's cold in here\", likesCount: 12},\r\n        {id: v1(), postText: \"I miss my mom\", likesCount: 35},\r\n    ],\r\n    newPostText: 'write something..'\r\n}\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case 'REMOVE-POST':\r\n            return {...state,posts: [...state.posts].filter(p => p.id !== action.id)}\r\n        case 'ADD-POST':\r\n            return {\r\n                ...state,\r\n                posts: [{id: v1(), postText: state.newPostText, likesCount: 0},...state.posts],\r\n                newPostText: ''\r\n            }\r\n        case 'UPDATE-NEW-POST-TEXT':\r\n            return {...state,newPostText: action.newText}\r\n        default: return {...state}\r\n    }\r\n}\r\nexport const addPostAC = () => {\r\n    return {type: 'ADD-POST'} as const\r\n}\r\nexport const updateNewPostTextAC = (text: string) => {\r\n    return {\r\n        type: 'UPDATE-NEW-POST-TEXT',\r\n        newText: text\r\n    } as const\r\n}\r\nexport const removePostAC = (id: string) => {\r\n    return {\r\n        type: 'REMOVE-POST',\r\n        id: id\r\n    } as const\r\n}","import React from \"react\"\r\nimport s from './Button.module.css'\r\n\r\ntype ButtonPropsTypes = {\r\n    onClick: () => void\r\n    children: string\r\n}\r\n\r\nexport function Button(props: ButtonPropsTypes) {\r\n    return (\r\n        <>\r\n        <button className={s.buttonStyle}\r\n                onClick={props.onClick}>{props.children}</button>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\nimport {PostType} from \"../../../../redux/store\";\r\nimport {Button} from \"../../../Button/Button\";\r\n\r\n\r\ntype PostPropsType = PostType &\r\n    {removePost: (id: string) => void}\r\n\r\nfunction Post(props: PostPropsType) {\r\n\r\n    return (\r\n        <div className={s.post}>\r\n            <div className={s.postBody}>\r\n                <div className={s.postAvatar}>\r\n                    <img src='https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/10/10a06adc92c1746b48b842c031199d692b1ba623_full.jpg'\r\n                         alt='avatar'/>\r\n                </div>\r\n                <div className={s.postText}>\r\n                    {props.postText}\r\n                </div>\r\n            </div>\r\n            <div className={s.likeArea}>\r\n                <span>likesCount = {props.likesCount}</span>\r\n                <Button onClick={() => props.removePost(props.id)}> Remove </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from \"react\";\r\nimport s from './ControlledTextarea.module.css';\r\n\r\ntype ControlledTextareaPropsTYpe = {\r\n    onPostChange: (text: string) => void\r\n    value: string\r\n    onTextClick: () => void\r\n}\r\n\r\nexport function ControlledTextarea(props: ControlledTextareaPropsTYpe) {\r\n\r\n    const onPostChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        if (e.currentTarget) {\r\n            let test = e.currentTarget.value\r\n            props.onPostChange(test)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.input}>\r\n            <textarea onChange={onPostChangeHandler}\r\n                      value={props.value}\r\n                      onClick={props.onTextClick}\r\n                      autoFocus/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\"\r\nimport Post from \"./Post/Post\";\r\nimport {PostType} from \"../../../redux/store\";\r\nimport {ControlledTextarea} from \"../../ControlledTextarea/ControlledTextarea\";\r\nimport {Button} from \"../../Button/Button\";\r\n\r\ntype MyPostsPropsType = {\r\n    posts: PostType[]\r\n    newPostText: string\r\n    removePost: (id: string) => void\r\n    addPost: () => void\r\n    onPostChange: (text: string) => void\r\n    onTextClickHandler: () => void\r\n}\r\n\r\nfunction MyPosts(props: MyPostsPropsType) {\r\n    let myPostsItems = props.posts.map((el) => <Post key={el.id}\r\n                                                     id={el.id}\r\n                                                     postText={el.postText}\r\n                                                     likesCount={el.likesCount}\r\n                                                     removePost={props.removePost}/>)\r\n    const addPost = () => props.addPost()\r\n    const onPostChange = (text: string) => props.onPostChange(text)\r\n\r\n    let onTextClickHandler = () => props.onTextClickHandler()\r\n\r\n    return (\r\n        <div className={s.myPosts}>\r\n            My posts\r\n            <div>\r\n                <div>\r\n                    <ControlledTextarea onPostChange={onPostChange}\r\n                                        value={props.newPostText}\r\n                                        onTextClick={onTextClickHandler}/>\r\n                    <Button onClick={addPost}>Add post</Button>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                { myPostsItems }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default MyPosts;","import {addPostAC, removePostAC, updateNewPostTextAC} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {AppDispatch, RootState} from \"../../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: RootState) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: AppDispatch) => {\r\n    return {\r\n        removePost: (id: string) => dispatch(removePostAC(id)),\r\n        addPost: () => dispatch(addPostAC()),\r\n        onPostChange: (text: string) => dispatch(updateNewPostTextAC(text)),\r\n        onTextClickHandler: () => dispatch(updateNewPostTextAC(''))\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts)","import React from \"react\";\r\nimport s from \"./Profile.module.css\"\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\n\r\nfunction Profile() {\r\n    return (\r\n        <div>\r\n            <div className={s.profile}>\r\n                <ProfileInfo\r\n                    img=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR4GXs_w8JLLJc_P90Kojd2Pzj649nHhjymWA&usqp=CAU\"\r\n                    name=\"Aleksandra\"\r\n                    age={28}\r\n                    aboutMe=\"Assigned cool at birth\"/>\r\n            </div>\r\n            <div>\r\n                <MyPostsContainer />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport s from \"./Message.module.css\"\r\n\r\ntype MessagePropsType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nfunction Message(props: MessagePropsType) {\r\n    return (\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport s from \"./Messages.module.css\";\r\nimport Message from \"./Message\";\r\nimport {MessageType} from \"../../../redux/store\";\r\nimport {ControlledTextarea} from \"../../ControlledTextarea/ControlledTextarea\";\r\nimport {Button} from \"../../Button/Button\";\r\n\r\ntype MessagesPropsType = {\r\n    messages: MessageType[]\r\n    newMessageText: string\r\n    addNewMessage: () => void\r\n    onMessageChangeHandler: (text: string) => void\r\n    onTextClickHandler: () => void\r\n}\r\n\r\n\r\nfunction Messages(props: MessagesPropsType) {\r\n\r\n    const addNewMessage = () => props.addNewMessage()\r\n\r\n    const onMessageChangeHandler = (text: string) => props.onMessageChangeHandler(text)\r\n\r\n    let onTextClickHandler = () => props.onTextClickHandler()\r\n\r\n    let messagesItems = props.messages.map((el) => <Message key={el.id} id={el.id} message={el.messageText}/>)\r\n    console.log(props.messages)\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.messages}>\r\n                {messagesItems}\r\n            </div>\r\n            <div>\r\n                <div>\r\n                    <ControlledTextarea onPostChange={onMessageChangeHandler}\r\n                                        value={props.newMessageText}\r\n                                        onTextClick={onTextClickHandler} />\r\n                </div>\r\n                <div>\r\n                    <Button onClick={addNewMessage}> Send\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Messages;","import React from \"react\";\r\nimport s from \"./Dialog.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogPropsType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nfunction Dialog(props: DialogPropsType) {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink activeClassName={s.activeDialog} to={`/dialogs/${props.id}`}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport Messages from \"./messages/Messages\";\r\nimport Dialog from \"./Dialog/Dialog\";\r\nimport {DialogType, MessageType} from \"../../redux/store\";\r\n\r\ntype DialogsPropsType = {\r\n    messages: MessageType[]\r\n    dialogs: DialogType[]\r\n    newMessageText: string\r\n    addNewMessage: () => void\r\n    onMessageChangeHandler: (text: string) => void\r\n    onTextClickHandler: () => void\r\n}\r\nfunction Dialogs(props: DialogsPropsType) {\r\n\r\n    let dialogsItems = props.dialogs.map((el: DialogType) => <Dialog key={el.id} id={el.id} name={el.name} />)\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                { dialogsItems }\r\n            </div>\r\n            <div className={s.messages}>\r\n                <Messages   messages={props.messages}\r\n                          newMessageText={props.newMessageText}\r\n                          addNewMessage={props.addNewMessage}\r\n                          onMessageChangeHandler={props.onMessageChangeHandler}\r\n                          onTextClickHandler={props.onTextClickHandler}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import {v1} from \"uuid\";\r\nimport {DialogType, MessageType} from \"./store\";\r\n\r\ntype DialogsPageType = {\r\n    messages: MessageType[]\r\n    dialogs: DialogType[]\r\n    newMessageBody: string\r\n}\r\n\r\ntype ActionTypes = ReturnType<typeof updateNewMessageBodyAC> | ReturnType<typeof addMessageAC>\r\n\r\nlet initialStore = {\r\n    messages: [{id: v1(), messageText: \"Hi, how are you?\"},\r\n        {id: v1(), messageText: \"Summer is coming!\"},\r\n        {id: v1(), messageText: \"Yo\"},\r\n        {id: v1(), messageText: \"Yoyo\"}],\r\n    dialogs: [{id: v1(), name: \"Tatiana\"},\r\n        {id: v1(), name: \"Dasha\"},\r\n        {id: v1(), name: \"Victor\"},\r\n        {id: v1(), name: \"Ergun\"},],\r\n    newMessageBody: 'write something:)'\r\n}\r\n\r\nexport const dialogsReducer = (state: DialogsPageType = initialStore, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case 'UPDATE-NEW-MESSAGE-BODY':\r\n            return {...state, newMessageBody: action.newMessageText}\r\n        case 'ADD-MESSAGE':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: v1(), messageText: state.newMessageBody}],\r\n                newMessageBody: ''\r\n            }\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const addMessageAC = () => {\r\n    return {type: 'ADD-MESSAGE'} as const\r\n}\r\n\r\nexport const updateNewMessageBodyAC = (text: string) => {\r\n    return {\r\n        type: 'UPDATE-NEW-MESSAGE-BODY',\r\n        newMessageText: text\r\n    } as const\r\n}","import Dialogs from \"./Dialogs\";\r\nimport {addMessageAC, updateNewMessageBodyAC} from \"../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppDispatch, RootState} from \"../../redux/redux-store\";\r\n\r\nlet mapDispatchToProps = (dispatch: AppDispatch) => {\r\n    return {\r\n        addNewMessage: () => dispatch(addMessageAC()),\r\n        onMessageChangeHandler: (text: string) => dispatch(updateNewMessageBodyAC(text)),\r\n        onTextClickHandler: () => dispatch(updateNewMessageBodyAC(''))\r\n    }\r\n}\r\nlet mapStateToProps = (state: RootState) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n        newMessageText: state.dialogsPage.newMessageBody\r\n    }\r\n}\r\n\r\nexport const DialogsContainer = connect(mapStateToProps,mapDispatchToProps)(Dialogs)\r\n","\r\nlet initialState: UsersPageType = {\r\n    users: []\r\n}\r\n\r\nexport type UsersType = {id: string, profileURL: string, followed: boolean, name: string, surName: string, city: string, country: string}[]\r\n\r\nexport type UsersPageType = {\r\n    users: UsersType\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof FollowAC> | ReturnType<typeof UnfollowAC> | ReturnType<typeof SetUsersAC>\r\n\r\nexport const usersReducer = (state: UsersPageType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'FOLLOW': return {...state, users: state.users.map(el => el.id === action.id ? {...el, followed: true} : el)}\r\n        case 'UNFOLLOW': return {...state, users: state.users.map(el => el.id === action.id ? {...el, followed: false} : el)}\r\n        case 'SET-USERS': return {...state, users: action.users}\r\n        default: return {...state}\r\n    }\r\n}\r\n\r\nexport const FollowAC = (id: string) => ({type: 'FOLLOW', id}) as const\r\nexport const UnfollowAC = (id: string) => ({type: 'UNFOLLOW', id}) as const\r\nexport const SetUsersAC = (users: UsersType) => ({type: 'SET-USERS', users}) as const","import {connect} from \"react-redux\";\r\nimport {Users} from \"./Users\";\r\nimport {AppDispatch, RootState} from \"../../redux/redux-store\";\r\nimport {FollowAC, SetUsersAC, UnfollowAC, UsersType} from \"../../redux/users-reduscer\";\r\n\r\nlet mapStateToProps = (state: RootState) => {\r\n    return {\r\n        users: state.usersPage.users\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: AppDispatch) => {\r\n    return {\r\n        follow: (id: string) => dispatch(FollowAC(id)),\r\n        unfollow: (id: string) => dispatch(UnfollowAC(id)),\r\n        setUsers: (users: UsersType) => dispatch(SetUsersAC(users))\r\n    }\r\n}\r\n\r\nexport const UsersContainer = connect(mapStateToProps, mapDispatchToProps)(Users)","import React from \"react\";\r\nimport {UsersType} from \"../../redux/users-reduscer\";\r\nimport s from './Users.module.css'\r\nimport {Button} from \"../Button/Button\";\r\nimport {v1} from \"uuid\";\r\n\r\ntype UsersPropsType = {\r\n    users: UsersType\r\n    follow: (id: string) => void\r\n    unfollow: (id: string) => void\r\n    setUsers: (users: UsersType) => void\r\n}\r\n\r\nexport const Users = (props: UsersPropsType) => {\r\n\r\n    if (props.users.length === 0) props.setUsers([\r\n        {id: v1(), profileURL: 'https://avatarfiles.alphacoders.com/233/thumb-233488.jpg',\r\n            followed: true, name: 'Tatiana', surName: 'Beliaeva', city: 'Severodvinsk', country: 'Russia'},\r\n        {id: v1(), profileURL: 'https://avatarfiles.alphacoders.com/240/thumb-240769.png',\r\n            followed: true, name: 'Darya', surName: 'Korelskaia', city: 'Saint-Petersburg', country: 'Russia'},\r\n        {id: v1(), profileURL: 'https://avatarfiles.alphacoders.com/240/thumb-240772.png',\r\n            followed: true, name: 'Natalia', surName: 'Snopkova', city: 'Saint-Petersburg', country: 'Russia'},\r\n        {id: v1(), profileURL: 'https://avatarfiles.alphacoders.com/237/thumb-237655.jpg',\r\n            followed: false, name: 'Natalia', surName: 'Tebenihina', city: 'Ljubljana', country: 'Slovenia'}\r\n    ])\r\n\r\n    return <div>\r\n        {props.users.map(el =>\r\n            <div key={el.id} className={s.userBody}>\r\n                <div className={s.avatarAndFollow}>\r\n\r\n                    <div>\r\n                        <img src={el.profileURL} className={s.profilePic} alt='avatar'/>\r\n                    </div>\r\n\r\n                    <div>\r\n                        {el.followed\r\n                            ? <Button onClick={() => props.unfollow(el.id)}>Unfollow</Button>\r\n                            : <Button onClick={() => props.follow(el.id)}>Follow</Button>}\r\n                    </div>\r\n                </div>\r\n                <div className={s.infoContainer}>\r\n                    <span className={s.nameSurname}>{el.name} {el.surName[0]}.</span>\r\n\r\n                    <span className={s.cityCountry}>{el.city}, {el.country}</span>\r\n                </div>\r\n            </div>)}\r\n    </div>\r\n}","import React from 'react';\nimport './App.css';\nimport Header from \"./components/header/Header\";\nimport Navbar from \"./components/navbar/Navbar\";\nimport Profile from \"./components/profile/Profile\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport {DialogsContainer} from \"./components/dialogs/DialogsContainer\";\nimport {UsersContainer} from \"./components/users/UsersContainer\";\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <div className=\"app_wrapper\">\n                <Header/>\n                <Navbar/>\n                <div className=\"app_wrapper_content\">\n\n                    <Route path='/dialogs' render = {() => <DialogsContainer />} />\n\n                    <Route path='/profile' render = {() => <Profile />} />\n\n                    <Route path='/users' render = {() => <UsersContainer />} />\n\n                </div>\n            </div>\n        </BrowserRouter>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {dialogsReducer} from \"./dialogs-reducer\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {usersReducer} from \"./users-reduscer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer\r\n})\r\n\r\nexport let store = createStore(reducers)\r\n\r\n\r\nexport type StoreType = typeof store\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\n\r\nexport type AppDispatch = typeof store.dispatch","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\n\n\n    ReactDOM.render(\n        <React.StrictMode>\n            <Provider store={store} >\n            <App />\n            </Provider>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}