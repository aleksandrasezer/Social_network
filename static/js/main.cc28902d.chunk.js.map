{"version":3,"sources":["components/navbar/Navbar.module.css","components/profile/MyPosts/Post/Post.module.css","components/dialogs/Dialogs.module.css","components/dialogs/Dialog/Dialog.module.css","components/header/Header.module.css","components/profile/Profile.module.css","components/profile/MyPosts/MyPosts.module.css","components/Button/Button.module.css","components/ControlledTextarea/ControlledTextarea.module.css","components/profile/ProfileInfo/ProfileInfo.module.css","components/dialogs/messages/Messages.module.css","components/dialogs/messages/Message.module.css","components/header/Header.tsx","components/navbar/Navbar.tsx","components/Button/Button.tsx","redux/profile-reducer.tsx","components/profile/MyPosts/Post/Post.tsx","components/ControlledTextarea/ControlledTextarea.tsx","components/profile/MyPosts/MyPosts.tsx","components/profile/ProfileInfo/ProfileInfo.tsx","components/profile/Profile.tsx","components/dialogs/messages/Message.tsx","redux/dialogs-reducer.tsx","components/dialogs/messages/Messages.tsx","components/dialogs/Dialog/Dialog.tsx","components/dialogs/Dialogs.tsx","App.tsx","reportWebVitals.ts","redux/store.tsx","index.tsx"],"names":["module","exports","Header","className","s","header","src","alt","Navbar","navbar","item","activeClassName","activeLink","to","href","Button","props","buttonStyle","onClick","children","updateNewPostTextAC","text","type","newText","Post","post","postBody","postAvatar","postText","likeArea","likesCount","id","dispatch","removePostAC","ControlledTextarea","input","onChange","e","currentTarget","test","value","onPostChange","onTextClick","MyPosts","myPostsItems","posts","map","el","myPosts","newPostText","ProfileInfo","img","profileInfo","name","age","aboutMe","Profile","profile","Message","message","updateNewMessageBodyAC","newMessageText","Messages","messagesItems","messages","messageText","console","log","newMessageBody","Dialog","dialog","activeDialog","Dialogs","dialogsItems","dialogs","App","path","render","state","dialogsPage","profilePage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","_state","v1","action","this","newMessage","push","dialogsReducer","filter","p","newPost","unshift","profileReducer","renderTree","subscriber","observer","getState","rerenderEntireTree","ReactDOM","StrictMode","bind","document","getElementById"],"mappings":"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","file":"static/js/main.cc28902d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__2u2Yx\",\"item\":\"Navbar_item__1nEI7\",\"activeLink\":\"Navbar_activeLink__3ePDo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__ev8Uz\",\"postBody\":\"Post_postBody__1zq20\",\"postAvatar\":\"Post_postAvatar__3h6-Q\",\"postText\":\"Post_postText__3WMa9\",\"likeArea\":\"Post_likeArea__2LeB2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2B8uW\",\"dialogsItems\":\"Dialogs_dialogsItems__1_8kw\",\"messages\":\"Dialogs_messages__3eMQ4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__VVj-X\",\"activeDialog\":\"Dialog_activeDialog__35LJb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__jfPv8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__33M3z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__2wOLj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonStyle\":\"Button_buttonStyle__39ehE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ControlledTextarea_input__UzrWz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__1Bljo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Messages_messages__3K0tN\",\"message\":\"Messages_message__3xkcK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1W3KS\"};","import React from \"react\";\r\nimport s from \"./Header.module.css\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className={s.header}>\r\n            <img src=\"https://www.clipartkey.com/mpngs/m/67-676200_clip-art-pinterest-rick-and-morty-png.png\" alt=\"logo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport s from \"./Navbar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nfunction Navbar() {\r\n    return <div className={s.navbar}>\r\n        <div className={s.item}>\r\n            <NavLink activeClassName={s.activeLink} to=\"/profile\">Profile</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink activeClassName={s.activeLink} to=\"/dialogs\">Messages</NavLink>\r\n        </div>\r\n        <div className={s.item}><a href=\"/feed\">News</a></div>\r\n        <div className={s.item}><a href=\"/music\">Music</a></div>\r\n        <div className={s.item}><a href=\"/settings\">Settings</a></div>\r\n    </div>\r\n}\r\n\r\nexport default Navbar;","import React from \"react\"\r\nimport s from './Button.module.css'\r\n\r\ntype ButtonPropsTypes = {\r\n    onClick: () => void\r\n    children: string\r\n}\r\n\r\nexport function Button(props: ButtonPropsTypes) {\r\n    return (\r\n        <>\r\n        <button className={s.buttonStyle}\r\n                onClick={props.onClick}>{props.children}</button>\r\n        </>\r\n    )\r\n}","import {ActionTypes, PostType} from \"./store\";\r\nimport {v1} from \"uuid\";\r\n\r\ntype ProfilePageType = { posts: PostType[], newPostText: string }\r\n\r\nexport const profileReducer = (state: ProfilePageType, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case 'REMOVE-POST':\r\n            state.posts = state.posts.filter(p => p.id !== action.id)\r\n            console.log('removing post..')\r\n            return state\r\n        case 'ADD-POST':\r\n            let newPost: PostType = {\r\n                id: v1(),\r\n                postText: state.newPostText,\r\n                likesCount: 0\r\n            }\r\n            state.posts.unshift(newPost)\r\n            state.newPostText = ''\r\n            return state\r\n        case 'UPDATE-NEW-POST-TEXT':\r\n            state.newPostText = action.newText\r\n            console.log('post is changing..')\r\n            return state\r\n        default: return state\r\n    }\r\n}\r\nexport const addPostAC = () => {\r\n    return {type: 'ADD-POST'} as const\r\n}\r\nexport const updateNewPostTextAC = (text: string) => {\r\n    return {\r\n        type: 'UPDATE-NEW-POST-TEXT',\r\n        newText: text\r\n    } as const\r\n}\r\nexport const removePostAC = (id: string) => {\r\n    return {\r\n        type: 'REMOVE-POST',\r\n        id: id\r\n    } as const\r\n}","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\nimport {ActionTypes, PostType} from \"../../../../redux/store\";\r\nimport {Button} from \"../../../Button/Button\";\r\nimport {removePostAC} from \"../../../../redux/profile-reducer\";\r\n\r\ntype PostPropsType = PostType &\r\n    {dispatch: (action: ActionTypes) => void}\r\n\r\nfunction Post(props: PostPropsType) {\r\n\r\n    const removePost = (id: string) => props.dispatch(removePostAC(id))\r\n\r\n    return (\r\n        <div className={s.post}>\r\n            <div className={s.postBody}>\r\n                <div className={s.postAvatar}>\r\n                    <img src='https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/10/10a06adc92c1746b48b842c031199d692b1ba623_full.jpg'/>\r\n                </div>\r\n                <div className={s.postText}>\r\n                    {props.postText}\r\n                </div>\r\n            </div>\r\n            <div className={s.likeArea}>\r\n                <span>likesCount = {props.likesCount}</span>\r\n                <Button onClick={() => removePost(props.id)}> Remove </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from \"react\";\r\nimport s from './ControlledTextarea.module.css';\r\n\r\ntype ControlledTextareaPropsTYpe = {\r\n    onPostChange: (text: string) => void\r\n    value: string\r\n    onTextClick: () => void\r\n}\r\n\r\nexport function ControlledTextarea(props: ControlledTextareaPropsTYpe) {\r\n\r\n    const onPostChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        if (e.currentTarget) {\r\n            let test = e.currentTarget.value\r\n            props.onPostChange(test)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.input}>\r\n            <textarea onChange={onPostChangeHandler}\r\n                      value={props.value}\r\n                      onClick={props.onTextClick}/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\"\r\nimport Post from \"./Post/Post\";\r\nimport {ActionTypes, PostType} from \"../../../redux/store\";\r\nimport {ControlledTextarea} from \"../../ControlledTextarea/ControlledTextarea\";\r\nimport {addPostAC, updateNewPostTextAC} from \"../../../redux/profile-reducer\";\r\nimport {Button} from \"../../Button/Button\";\r\n\r\ntype MyPostsPropsType = {\r\n    posts: PostType[]\r\n    newPostText: string\r\n    dispatch: (action: ActionTypes) => void\r\n}\r\n\r\nfunction MyPosts(props: MyPostsPropsType) {\r\n    let myPostsItems = props.posts.map((el) => <Post id={el.id}\r\n                                                     postText={el.postText}\r\n                                                     likesCount={el.likesCount}\r\n                                                     dispatch={props.dispatch}/>)\r\n    const addPost = () => {\r\n        props.dispatch(addPostAC())\r\n    }\r\n    const onPostChange = (text: string) => {\r\n            props.dispatch(updateNewPostTextAC(text))\r\n        }\r\n\r\n    let onTextClickHandler = () => props.dispatch(updateNewPostTextAC(''))\r\n\r\n    return (\r\n        <div className={s.myPosts}>\r\n            My posts\r\n            <div>\r\n                <div>\r\n                    <ControlledTextarea onPostChange={onPostChange}\r\n                                        value={props.newPostText}\r\n                                        onTextClick={onTextClickHandler}/>\r\n                    <Button onClick={addPost}>Add post</Button>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                { myPostsItems }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\n\r\ntype ProfileInfoPropsType = {\r\n    img: string\r\n    name: string\r\n    age: number\r\n    aboutMe: string\r\n}\r\n\r\nfunction ProfileInfo(props: ProfileInfoPropsType) {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src={props.img} alt='my_profile_avatar'/>\r\n            </div>\r\n            <div className={s.profileInfo}>\r\n                {props.name} <br/>\r\n                {props.age} y.o.<br/>\r\n                {props.aboutMe}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport s from \"./Profile.module.css\"\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {ActionTypes, PostType} from \"../../redux/store\";\r\n\r\ntype ProfilePropsType = {\r\n    posts: PostType[]\r\n    newPostText: string\r\n    dispatch: (action: ActionTypes) => void\r\n}\r\n\r\nfunction Profile(props: ProfilePropsType) {\r\n    return (\r\n        <div>\r\n            <div className={s.profile}>\r\n                <ProfileInfo\r\n                    img=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR4GXs_w8JLLJc_P90Kojd2Pzj649nHhjymWA&usqp=CAU\"\r\n                    name=\"Aleksandra\"\r\n                    age={28}\r\n                    aboutMe=\"Assigned cool at birth\"/>\r\n            </div>\r\n            <div>\r\n                <MyPosts posts={props.posts}\r\n                         dispatch={props.dispatch}\r\n                         newPostText={props.newPostText} />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport s from \"./Message.module.css\"\r\n\r\ntype MessagePropsType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nfunction Message(props: MessagePropsType) {\r\n    return (\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","import {ActionTypes, DialogType, MessageType} from \"./store\";\r\nimport {v1} from \"uuid\";\r\n\r\ntype DialogsPageType = {\r\n    messages: MessageType[]\r\n    dialogs: DialogType[]\r\n    newMessageBody: string\r\n}\r\n\r\nexport const dialogsReducer = (state: DialogsPageType, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case 'UPDATE-NEW-MESSAGE-BODY':\r\n            state.newMessageBody = action.newMessageText\r\n            console.log('message is changing..')\r\n            return state\r\n        case 'ADD-MESSAGE':\r\n            const newMessage: MessageType = {\r\n                id: v1(),\r\n                messageText: state.newMessageBody\r\n            }\r\n            state.messages.push(newMessage)\r\n            state.newMessageBody = ''\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addMessageAC = () => {\r\n    return {type: 'ADD-MESSAGE'} as const\r\n}\r\n\r\nexport const updateNewMessageBodyAC = (text: string) => {\r\n    return {\r\n        type: 'UPDATE-NEW-MESSAGE-BODY',\r\n        newMessageText: text\r\n    } as const\r\n}","import React from \"react\";\r\nimport s from \"./Messages.module.css\";\r\nimport Message from \"./Message\";\r\nimport {ActionTypes, MessageType} from \"../../../redux/store\";\r\nimport {ControlledTextarea} from \"../../ControlledTextarea/ControlledTextarea\";\r\nimport {addMessageAC, updateNewMessageBodyAC} from \"../../../redux/dialogs-reducer\";\r\nimport {Button} from \"../../Button/Button\";\r\n\r\ntype MessagesPropsType = {\r\n    messages: MessageType[]\r\n    dispatch: (action: ActionTypes) => void\r\n    newMessageBody: string\r\n}\r\n\r\n\r\nfunction Messages(props: MessagesPropsType) {\r\n\r\n    const addNewMessage = () => props.dispatch(addMessageAC())\r\n\r\n    const onMessageChangeHandler = (text: string) => {\r\n            props.dispatch(updateNewMessageBodyAC(text))\r\n    }\r\n\r\n    let onTextClickHandler = () => props.dispatch(updateNewMessageBodyAC(''))\r\n\r\n    let messagesItems = props.messages.map((el) => <Message id={el.id} message={el.messageText}/>)\r\n    console.log(props.messages)\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.messages}>\r\n                {messagesItems}\r\n            </div>\r\n            <div>\r\n                <div>\r\n                    <ControlledTextarea onPostChange={onMessageChangeHandler}\r\n                                        value={props.newMessageBody}\r\n                                        onTextClick={onTextClickHandler} />\r\n\r\n                </div>\r\n                <div>\r\n                    <Button onClick={addNewMessage}> Send\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Messages;","import React from \"react\";\r\nimport s from \"./Dialog.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nfunction Dialog(props: DialogPropsType) {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink activeClassName={s.activeDialog} to={`/dialogs/${props.id}`}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport Messages from \"./messages/Messages\";\r\nimport Dialog from \"./Dialog/Dialog\";\r\nimport {ActionTypes, DialogType, MessageType} from \"../../redux/store\";\r\n\r\ntype DialogsPropsType = {\r\n    messages: MessageType[]\r\n    dialogs: DialogType[]\r\n    dispatch: (action: ActionTypes) => void\r\n    newMessageBody: string\r\n}\r\nfunction Dialogs(props: DialogsPropsType) {\r\n    // @ts-ignore\r\n    let dialogsItems = props.dialogs.map((el) => <Dialog id={el.id} name={el.name} />)\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                { dialogsItems }\r\n            </div>\r\n            <div className={s.messages}>\r\n                <Messages messages={props.messages}\r\n                          newMessageBody={props.newMessageBody}\r\n                          dispatch={props.dispatch}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\nimport './App.css';\nimport Header from \"./components/header/Header\";\nimport Navbar from \"./components/navbar/Navbar\";\nimport Profile from \"./components/profile/Profile\";\nimport Dialogs from \"./components/dialogs/Dialogs\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport {ActionTypes, StateType} from \"./redux/store\";\n\ntype AppPropsType = {\n    state: StateType\n    dispatch: (action: ActionTypes) => void\n}\nfunction App(props: AppPropsType) {\n    return (\n        <BrowserRouter>\n            <div className=\"app_wrapper\">\n                <Header/>\n                <Navbar/>\n                <div className=\"app_wrapper_content\">\n                    <Route path='/dialogs' render = {() => <Dialogs dialogs={props.state.dialogsPage.dialogs}\n                                                                    messages={props.state.dialogsPage.messages}\n                                                                    dispatch={props.dispatch}\n                                                                    newMessageBody={props.state.dialogsPage.newMessageBody}/>} />\n                    <Route path='/profile' render = {() => <Profile posts={props.state.profilePage.posts}\n                                                                    dispatch={props.dispatch}\n                                                                    newPostText={props.state.profilePage.newPostText} />} />\n                </div>\n            </div>\n        </BrowserRouter>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {v1} from \"uuid\";\r\nimport {addMessageAC, dialogsReducer, updateNewMessageBodyAC} from \"./dialogs-reducer\";\r\nimport {addPostAC, profileReducer, removePostAC, updateNewPostTextAC} from \"./profile-reducer\";\r\n\r\nexport type StoreType = {\r\n    _state: StateType\r\n    renderTree: () => void\r\n    subscriber: (observer: () => void) => void\r\n    getState: () => StateType\r\n    dispatch: (action: ActionTypes) => void\r\n}\r\n\r\nexport type ActionTypes = ReturnType<typeof addPostAC> |\r\n    ReturnType<typeof updateNewPostTextAC> |\r\n    ReturnType<typeof updateNewMessageBodyAC> |\r\n    ReturnType<typeof addMessageAC> |\r\n    ReturnType<typeof removePostAC>\r\nexport type StateType = {\r\n    profilePage: { posts: PostType[], newPostText: string }\r\n    dialogsPage: {\r\n        messages: MessageType[]\r\n        dialogs: DialogType[]\r\n        newMessageBody: string\r\n    }\r\n}\r\nexport type PostType = {\r\n    id: string\r\n    postText: string\r\n    likesCount: number\r\n}\r\nexport type MessageType = {\r\n    id: string\r\n    messageText: string\r\n}\r\nexport type DialogType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport const store: StoreType = {\r\n    _state: {\r\n        profilePage: {\r\n            posts: [\r\n                {id: v1(), postText: \"Hello there\", likesCount: 8},\r\n                {id: v1(), postText: \"It's cold in here\", likesCount: 12},\r\n                {id: v1(), postText: \"I miss my mom\", likesCount: 35},\r\n            ],\r\n            newPostText: 'write something..'\r\n        },\r\n        dialogsPage: {\r\n            messages: [{id: v1(), messageText: \"Hi, how are you?\"},\r\n                {id: v1(), messageText: \"Summer is coming!\"},\r\n                {id: v1(), messageText: \"Yo\"},\r\n                {id: v1(), messageText: \"Yoyo\"}],\r\n            dialogs: [{id: v1(), name: \"Tatiana\"},\r\n                {id: v1(), name: \"Dasha\"},\r\n                {id: v1(), name: \"Victor\"},\r\n                {id: v1(), name: \"Ergun\"},],\r\n            newMessageBody: 'write something:)'\r\n        }\r\n    },\r\n    dispatch(action) {\r\n        this._state.dialogsPage = dialogsReducer(this._state.dialogsPage,action)\r\n        this._state.profilePage = profileReducer(this._state.profilePage,action)\r\n        this.renderTree()\r\n    },\r\n    renderTree() {\r\n        console.log('state changed')\r\n    },\r\n    subscriber(observer) {\r\n        this.renderTree = observer\r\n    },\r\n    getState() {\r\n        return this._state\r\n    }\r\n}\r\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from \"./redux/store\";\n\nlet rerenderEntireTree = () => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <App state={store.getState()}\n                 dispatch={store.dispatch.bind(store)} />\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\nrerenderEntireTree()\nstore.subscriber(rerenderEntireTree)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}