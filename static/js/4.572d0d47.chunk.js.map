{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/chat/Chat.module.css","components/chat/chat-message/ChatMessage.module.css","components/chat/chat-message/ChatMessage.tsx","components/chat/Chat.tsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","ChatMessage","props","className","s","message","src","photo","chatProfilePic","alt","userName","socket","Chat","useState","messages","setMessages","useEffect","close","WebSocket","addEventListener","resp","prevMessages","JSON","parse","data","openSocket","chatMessages","map","m","userId","chatContainer","onSubmit","formData","send"],"mappings":"uKAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,oBIJtGC,EAAOC,QAAU,CAAC,cAAgB,4BAA4B,SAAW,yB,oBCAzED,EAAOC,QAAU,CAAC,QAAU,+B,iICGfC,EAAc,SAACC,GAAiC,IAAD,EACxD,OACI,gCACI,sBAAKC,UAAWC,IAAEC,QAAlB,UACI,8BACI,qBAAKC,IAAG,UAAEJ,EAAMK,aAAR,QAAiBC,IAAgBC,IAAK,aAGlD,gCACI,4BAAIP,EAAMQ,WACV,uBACCR,EAAMG,cAGf,2BCbRM,EAA2B,KAqChBC,UAnCQ,WAAO,IAAD,EAEOC,mBAAoC,IAF3C,mBAElBC,EAFkB,KAERC,EAFQ,KAmBzBC,qBAAU,kBAfS,WAAO,IAAD,EACf,QAAN,EAAAL,SAAA,SAAQM,SACRN,EAAS,IAAIO,UAAU,iEAChBC,iBAAiB,WAAW,SAACC,GAChCL,GAAY,SAACM,GAAD,4BAAsBA,GAAtB,YAAuCC,KAAKC,MAAMH,EAAKI,cAW3DC,KAAc,IAE9B,IAAIC,EAAeZ,EAASa,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CACarB,MAAOqB,EAAErB,MACTG,SAAUkB,EAAElB,SACZL,QAASuB,EAAEvB,SAHNuB,EAAEC,WAIzD,OACI,sBAAK1B,UAAWC,IAAE0B,cAAlB,UACI,qBAAK3B,UAAWC,IAAEU,SAAlB,SACKY,IAEL,cAAC,IAAD,CAAaK,SAlBA,SAACC,GAAmC,IAAD,EAC/CA,IAGC,QAAN,EAAArB,SAAA,SAAQsB,KAAKD,EAAS3B","file":"static/js/4.572d0d47.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatContainer\":\"Chat_chatContainer__j8DXm\",\"messages\":\"Chat_messages__1eilr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"ChatMessage_message__2elaH\"};","import React from \"react\";\r\nimport chatProfilePic from '../../../assets/images/bryan_avatar.jpg'\r\nimport s from './ChatMessage.module.css'\r\n\r\nexport const ChatMessage = (props: ChatMessagePropsType) => {\r\n    return (\r\n        <div>\r\n            <div className={s.message}>\r\n                <div>\r\n                    <img src={props.photo ?? chatProfilePic} alt={'avatar'}/>\r\n                </div>\r\n\r\n                <div>\r\n                    <b>{props.userName}</b>\r\n                    <br/>\r\n                    {props.message}\r\n                </div>\r\n            </div>\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\n//types\r\ntype ChatMessagePropsType = {\r\n    message: string\r\n    photo: string\r\n    userName: string\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport s from './Chat.module.css'\r\nimport MessageForm, {MessageFormDataType} from \"../dialogs/messages/message/newMessage/NewMessage\";\r\nimport {ChatMessage} from \"./chat-message/ChatMessage\";\r\n\r\nlet socket: WebSocket | null = null\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n    const [messages, setMessages] = useState<ChatMessageResponseType[]>([])\r\n\r\n    const openSocket = () => {\r\n        socket?.close()\r\n        socket = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n        socket.addEventListener('message', (resp) => {\r\n            setMessages((prevMessages) => [...prevMessages, ...JSON.parse(resp.data)])\r\n        })\r\n    }\r\n\r\n    const onAddMessage = (formData: MessageFormDataType) => {\r\n        if (!formData) {\r\n            return\r\n        }\r\n        socket?.send(formData.message)\r\n    }\r\n\r\n    useEffect(() => openSocket(), [])\r\n\r\n    let chatMessages = messages.map(m => <ChatMessage key={m.userId}\r\n                                                      photo={m.photo}\r\n                                                      userName={m.userName}\r\n                                                      message={m.message}/>)\r\n    return (\r\n        <div className={s.chatContainer}>\r\n            <div className={s.messages}>\r\n                {chatMessages}\r\n            </div>\r\n            <MessageForm onSubmit={onAddMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n\r\n//types\r\ntype ChatMessageResponseType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\n\r\n"],"sourceRoot":""}